#!/usr/bin/env ruby

require 'io/console'
require 'thor'
require_relative '../lib/fibonacci/fibonacci'

class TgFib < Thor
  desc "term N", "Compute fibonacci sequence up to the Nth term"
  def term(n)
    puts term_seq(n)
  end

  desc "max N", "Compute fibonacci sequence up to a maximum of N"
  def max(n)
    puts max_seq(n)
  end

  desc "repl", "Run in a read-eval-print loop (default)"
  def repl
    loop do
      puts "\nPlease enter a command: (h)elp, (q)uit"
      print "> "
      command = STDIN.gets.chomp.downcase
      case command
      when /^m\s+\d+$/, /^max\s+\d+$/
        puts max_seq(command.split(' ').last)
      when /^t\s+\d+$/, /^term\s+\d+$/
        puts term_seq(command.split(' ').last)
      when 'h', 'help'
        puts interactive_help
      when 'q', 'quit', 'exit'
        break
      else
        puts "Please a valid command"
      end
    end
  end

  default_task :repl

  no_commands do
    def sequence(number)
      Fibonacci::Fibonacci.sequence(Integer(number))
    end

    def upto(number)
      Fibonacci::Fibonacci.upto(Integer(number))
    end

    def term_seq(number)
      format(sequence(number))
    end

    def max_seq(number)
      format(upto(number))
    end

    def format(sequence)
      "{ #{sequence.join(', ')} }"
    end

    def interactive_help
      <<~HELP
      #{divider}
      Interactive help:

      Commands:
      (h)elp      # Show this help menu
      (q)uit      # Quit the program
      (m)ax N     # Compute fibonacci sequence up to a maximum of N
      (t)erm N    # Compute fibonacci sequence up to the Nth term"

      Examples:
      > max 6
      # => { 1, 1, 2, 3, 5 }

      > m 6
      # => { 1, 1, 2, 3, 5 }

      > term 6
      # => { 1, 1, 2, 3, 5, 8 }

      > t 6
      # => { 1, 1, 2, 3, 5, 8 }
      #{divider}
      HELP
    end

    def divider
      '=' * IO.console.winsize[1]
    end
  end
end

TgFib.start(ARGV)
